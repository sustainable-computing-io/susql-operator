apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: susql-controller-manager
    app.kubernetes.io/name: namespace
    app.kubernetes.io/instance: system
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: susql-operator
    app.kubernetes.io/part-of: susql-operator
    app.kubernetes.io/managed-by: kustomize
  name: system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: susql-controller-manager
  namespace: system
  labels:
    app.kubernetes.io/name: deployment
    app.kubernetes.io/instance: susql-controller-manager
    app.kubernetes.io/component: manager
    app.kubernetes.io/part-of: susql-operator
    app.kubernetes.io/created-by: susql-operator
    app.kubernetes.io/managed-by: kustomize
spec:
  selector:
    matchLabels:
      control-plane: susql-controller-manager
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: susql-controller-manager
    spec:
      # TODO(user): Uncomment the following code to configure the nodeAffinity expression
      # according to the platforms which are supported by your solution.
      # It is considered best practice to support multiple architectures. You can
      # build your manager image using the makefile target docker-buildx.
      # affinity:
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #         - matchExpressions:
      #           - key: kubernetes.io/arch
      #             operator: In
      #             values:
      #               - amd64
      #               - arm64
      #               - ppc64le
      #               - s390x
      #           - key: kubernetes.io/os
      #             operator: In
      #             values:
      #               - linux
      securityContext:
        runAsNonRoot: true
        # TODO(user): For common cases that do not require escalating privileges
        # it is recommended to ensure that all your Pods/Containers are restrictive.
        # More info: https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
        # Please uncomment the following code if your project does NOT have to work on old Kubernetes
        # versions < 1.19 or on vendors versions which do NOT support this field by default (i.e. OpenShift < 4.11 ).
        # seccompProfile:
        #   type: RuntimeDefault
      containers:
      - command:
        - /manager
#        - /debug-entrypoint.sh
        env:
          - name: KEPLER-PROMETHEUS-URL
            value: "https://thanos-querier.openshift-monitoring.svc.cluster.local:9091"
          - name: KEPLER-METRIC-NAME
            value: "kepler_container_joules_total"
          - name: SUSQL-PROMETHEUS-DATABASE-URL
            # value: http://prometheus-susql.default.svc.cluster.local:9090
            value: https://thanos-querier.openshift-monitoring.svc.cluster.local:9091
          - name: SUSQL-PROMETHEUS-METRICS-URL
            value: "http://0.0.0.0:8082"
          - name: SAMPLING-RATE
            value: "2"
          - name: LEADER-ELECT
            value: "true"
          - name: HEALTH-PROBE-BIND-ADDRESS
            value: ":8081"
          - name: METRICS-BIND-ADDRESS
            value: "127.0.0.1:9999"
        args:
        - --leader-elect=$(LEADER-ELECT)
        # - --deployment-namespace=susql-operator
        - --kepler-prometheus-url=$(KEPLER-PROMETHEUS-URL)
        - --kepler-metric-name=$(KEPLER-METRIC-NAME)
        - --susql-prometheus-database-url=$(SUSQL-PROMETHEUS-DATABASE-URL)
        - --susql-prometheus-metrics-url=$(SUSQL-PROMETHEUS-METRICS-URL)
        - --sampling-rate=$(SAMPLING-RATE)
        - --health-probe-bind-address=$(HEALTH-PROBE-BIND-ADDRESS)
        - --metrics-bind-address=$(METRICS-BIND-ADDRESS)
        image: '<OPERATOR_IMG>'
        imagePullPolicy: IfNotPresent
        name: manager
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - "ALL"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        # TODO(user): Configure the resources accordingly based on the project requirements.
        # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        ports:
        - containerPort: 8082
          protocol: TCP
          name: metric
        - containerPort: 9999
          protocol: TCP
          name: autometric
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 10m
            memory: 128Mi
      serviceAccountName: susql-controller-manager
      terminationGracePeriodSeconds: 10
